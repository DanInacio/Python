In PostGreSQL:
	a* -> Any set of characters after 'a'
	_a -> Any single character before 'a'

In RegEx Basic:
*        -> Zero or more occurrences of preceding character
.        -> Represents any character
\s       -> Whitespace
[pqr]    -> A single character which can be either a 'p', 'q' or 'r'.
[a-d]    -> A single character which falls in the range "a-d"
[^pq]    -> A single character which CANNOT be 'p' nor 'q'
^pattern -> ^ represents the beginning of the line
pattern$ -> $ represents the end of the line

"foo.bar": Any character between
"foo.*bar": Any string of any number of characters several times
"foo\s*bar": Zero or more occurrences of whitespace
"foo" "moo" "coo", i.e., "[fmc]oo": Single character within the list
"joo" "koo" "loo", i.e., "[j-l]oo": Single character within range
"xxx.yy" "xx.yyyy" "x.yy", i.e., "x*\.y*": Xs and Ys with dot in between

In RegEx Advanced:
+         -> One or more occurrences of preceding character
?         -> Zero or One occurrence of preceding character
pat1|pat2 -> Matches either pat1 or pat2
()        -> Divides patterns into groups
{m}       -> Exactly 'm' occurrences of what precedes
{m,n}     -> At least 'm' and at most 'n' occurrences of what precedes.

[0-9][0-9][0-9], i.e., "^[0-9]{3}$": 3 digits with begin and end characters
"^[a-z]{4,6}$": Between 4 to 6 letters
"^(ha){4,}$": "ha" pattern, repeated at least 4 times
"^(ha){,2}$": "ha" pattern, repeated at most 2 times
"foo a+ bar": "a" shows up at least once
"https?": "s" can only show up 0 or 1 times
"logwood" "plywood", i.e., "(log|ply) wood": One or the other pattern

GROUP CAPTURE:
Find screen resolutions 1280x720, 1920x1080, 1600x900, etc -> "^([0-9]+)x([0-9]+)$"
Turn John Wallace into Wallace,John -> ^([a-zA-Z]+)\s([a-zA-Z]+)$
A clock's time, e.g.: 7:32, 12:23, etc. -> ^([0-9]{1,2}):([0-9]{2})$
A phone number with 10 digits: xxx.yyy.zzzz -> ^[0-9]{3}\.[0-9]{3}\.[0-9]{4}$